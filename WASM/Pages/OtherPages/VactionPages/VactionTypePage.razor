@implements IDisposable

@if(sectionState.ShowVactionType)
{

    <MudPaper Class="mt-5" Elevation="1">
        <MudTable Items="@VactionTypes.Take(8)" @bind-SelectedItem="vactionTypeModel"
                  Bordered="true" Dense="@dense" Hover="@hover" Filter="new Func<VactionType, bool>(FilterAsync)" SortLabel="Sort By">

            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="float-start me-4">
                    Vaction Types
                </MudText>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="AddClicked" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary">Add Vaction</MudButton>
                <MudSpacer />
                <MudTextField Placeholder="Search"
                              Adornment="Adornment.Start"
                              IconSize="Size.Small"
                              Class="mt-0"
                              FullWidth="false"
                              Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              @bind-Value="searchString">

                </MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<VactionType, object>(x=>x.Id)">#</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<VactionType, object>(x=>x.Id)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<VactionType, object>(x=>x.Id)">Type</MudTableSortLabel>
                </MudTh>
               
                <MudTh>
                    Actions
                </MudTh>
            </HeaderContent>
            <RowTemplate>

                @if(VactionTypes is not null)
                {  

                <MudTd DataLabel="#">@((VactionTypes.IndexOf(context) + 1))</MudTd>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Type">@context.Name</MudTd>

                <MudTd DataLabel="Actions">
                    <MudItem>
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" id="cursorStyle" @onclick="()=>EditClicked(context)"></MudIcon>
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" id="cursorStyle" @onclick="()=>DeleteClicked(context)"></MudIcon>
                    </MudItem>
                    </MudTd>

                }
                else
                {
                  <MudTd>
                        <MudItem Class="alert alert-info text-center">
                            No Vaction Type added yet!.
                        </MudItem>
                  </MudTd>  
                
                }

            </RowTemplate>

        </MudTable>
    </MudPaper>
}


<VactionTypeDialog @ref="vactionTypeDialog" vactionType="vactionTypeModel" HandleSaveOperationEvent="HandleSaveOperationEvent"/>


<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

@code {
    VactionTypeDialog? vactionTypeDialog;
    VactionType vactionTypeModel = new();

    public List<VactionType> VactionTypes { get; set; } = new();

    private bool hover = true;
    private bool dense = true;
    private string searchString = "";

    private bool FilterAsync(VactionType type)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if ($"{type.Id}".Contains(searchString)) return true;
        if ($"{type.Name}".Contains(searchString)) return true;

        return false;
    }


    protected override async Task OnInitializedAsync()
    {
        await GetTypes();
        sectionState.Action += StateHasChanged;
    }



    private void OpenDialog()
    {
        vactionTypeDialog?.OpenDialog();
    }

    void AddClicked()
    {
        vactionTypeDialog?.ChangeTitle("Add");
        vactionTypeModel = new();
        OpenDialog();
    }
    private void EditClicked(VactionType doc)
    {
        vactionTypeDialog?.ChangeTitle("Update");
        vactionTypeModel = doc;
        OpenDialog();
    }

    private async Task DeleteClicked(VactionType doc)
    {
        SweetAlertResult confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are You sure?",
                Text = $"You will not be able to recover {doc.Name}!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Delete",
                CancelButtonText = "Cancel"
            });
        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await swal.FireAsync(
              "Deleted",
              $"{doc.Name} has been deleted.",
              SweetAlertIcon.Success
              );
            var response = await _vactionTypeService.Delete(doc.Id, Constants.VacationsTypeBaseUrl);
            var result = await DisplayMessage(response.Successd, response.Message);
            if (result)
                await GetTypes();
        }
        else if (confirm.Dismiss == DismissReason.Cancel)
        {
            await swal.FireAsync(
              "Cancelled",
              $"{doc.Name} is safe :)",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task HandleSaveOperationEvent(VactionType vaction)
    {
        bool SuccessCheck = false;
        if (vaction.Id > 0)
        {
            var result = await _vactionTypeService.Update(vaction, Constants.VacationsTypeBaseUrl);
            SuccessCheck = await DisplayMessage(result.Successd, result.Message);
        }
        else
        {
            var result = await _vactionTypeService.Insert(vaction, Constants.VacationsTypeBaseUrl);
            SuccessCheck = await DisplayMessage(result.Successd, result.Message);
        }

        if (SuccessCheck)
        {
            vactionTypeModel = new();
            await GetTypes();
            vactionTypeDialog?.ChangeTitle("Add");
            vactionTypeDialog!.CloseDialog();
        }
    }

    private async Task<bool> DisplayMessage(bool success, string message)
    {
        if (success)
        {
            await dialogService.ShowMessageBox("Success Operation",message);
            return true;
        }
        else
        {
            await dialogService.ShowMessageBox("Alert!",message);
            return false;
        }
    }

    //Execl Export / PDF Export



    private async Task GetTypes() => VactionTypes = await _vactionTypeService.GetAll(Constants.VacationsTypeBaseUrl);

    public void Dispose()
    {
        sectionState.Action -= StateHasChanged;
    }
}
