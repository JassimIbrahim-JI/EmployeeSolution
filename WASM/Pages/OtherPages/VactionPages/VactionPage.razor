@implements IDisposable

@if(sectionState.ShowVaction)
{
    <MudPaper Class="mt-5" Elevation="1">
        <MudTable Items="@Vactions.Take(6)" @bind-SelectedItem="Model"
                  Bordered="true" Dense="@dense" Hover="@hover" Filter="new Func<Vaction, bool>(FilterAsync)" SortLabel="Sort By">

            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="float-start me-4">
                    Vactions
                </MudText>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="AddClicked" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary">Add Vaction</MudButton>
                <MudSpacer />
                <MudTextField Placeholder="Search"
                              Adornment="Adornment.Start"
                              IconSize="Size.Small"
                              Class="mt-0"
                              FullWidth="false"
                              Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              @bind-Value="searchString">

                </MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Vaction, object>(x=>x.EmployeeId)">#</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Vaction, object>(x=>x.EmployeeId)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Vaction, object>(x=>x.EmployeeId)">Start Date</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Vaction, object>(x=>x.EmployeeId)">End Date</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Vaction, object>(x=>x.EmployeeId)">No of Days</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    Actions
                </MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel="#">@((Vactions.IndexOf(context) + 1))</MudTd>
                <MudTd DataLabel="Id">@context.EmployeeId</MudTd>
                <MudTd DataLabel="Start Date">@context.StartDate</MudTd>
                <MudTd DataLabel="End Date">@context.EndDate</MudTd>
                <MudTd DataLabel="No of Days">@context.NumberOfDays</MudTd>

                <MudTd DataLabel="Actions">
                    <MudItem>
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" id="cursorStyle" @onclick="()=>EditClicked(context)"></MudIcon>
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" id="cursorStyle" @onclick="()=>DeleteClicked(context)"></MudIcon>
                    </MudItem>
                </MudTd>



            </RowTemplate>

        </MudTable>
    </MudPaper>
}

<VactionDialog @ref="vactionDialog" HandleSaveOperationEvent="HandleSaveOperationEvent" VactionTypes="VactionTypes" Vaction="Model"/>
<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

@code {
    VactionDialog? vactionDialog;

    Vaction Model = new();
    public List<Vaction> Vactions { get; set; } = new();
    public List<VactionType> VactionTypes { get; set; } = new();

    private bool hover = true;
    private bool dense = true;
    private string searchString = "";

    private bool FilterAsync(Vaction vaction)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if ($"{vaction.StartDate}".Contains(searchString)) return true;
        if ($"{vaction.NumberOfDays}".Contains(searchString)) return true;
        if ($"{vaction.EmployeeId}".Contains(searchString)) return true;
        if ($"{vaction.EndDate}".Contains(searchString)) return true;

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        Model.StartDate = new DateTime(2024);
        await GetVactions();
        await GetTypes();
        sectionState.Action += StateHasChanged;
    }

    private void OpenDialog()
    {
        vactionDialog?.OpenDialog();
    }

    void AddClicked()
    {
        Model = new();
        OpenDialog();
    }
    private void EditClicked(Vaction doc)
    {
        Model = doc;
        OpenDialog();
    }

    private async Task DeleteClicked(Vaction doc)
    {
        SweetAlertResult confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are You sure?",
                Text = "You will not be able to recover this!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Delete",
                CancelButtonText = "Cancel"
            });
        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await swal.FireAsync(
              "Deleted",
              "this item has been deleted.",
              SweetAlertIcon.Success
              );
            var response = await _vactionService.Delete(doc.Id, Constants.VacationBaseUrl);
            var result = await DisplayMessage(response.Successd, response.Message);
            if (result)
                await GetVactions();
        }
        else if (confirm.Dismiss == DismissReason.Cancel)
        {
            await swal.FireAsync(
              "Cancelled",
              "item now is safe :)",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task HandleSaveOperationEvent(Vaction item)
    {
        var result = await _vactionService.Update(item, Constants.VacationBaseUrl);
        bool SuccessCheck = await DisplayMessage(result.Successd, result.Message);
        if (SuccessCheck)
        {
            Model = new();
            await GetVactions();
            vactionDialog!.CloseDialog();
        }
    }

    private async Task<bool> DisplayMessage(bool success, string message)
    {
        if (success)
        {
            await dialogService.ShowMessageBox("Success Operation", message);
            return true;
        }
        else
        {
            await dialogService.ShowMessageBox("Alert!",message);
            return false;
        }
    }


    private async Task GetVactions() => Vactions = await _vactionService.GetAll(Constants.VacationBaseUrl);
    private async Task GetTypes() => VactionTypes = await _vactionTypeService.GetAll(Constants.VacationsTypeBaseUrl);

    public void Dispose()
    {
        sectionState.Action -= StateHasChanged;
    }
}
