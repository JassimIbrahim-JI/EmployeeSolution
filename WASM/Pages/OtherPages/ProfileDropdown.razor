@using System.Security.Claims
@using WASM.Pages.ContentPages.ProfilePages
@inject UserProfileState userState
@inject GetHttpClient getHttpClient
@implements IDisposable

<div class="dropdown">
    <button type="button" class="btn btn-group dropdown-toggle" id="dropdownMenuBtn" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <img src="@(userState.userProfile.ProfilePicture)"  width="30" height="30" style="border-radius:50%;" />
           <span class="visually-hidden">Toggle Dropdown</span>
    </button>

    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuBtn">
        
        <a class="dropdown-item text-decoration-none cursorStyle" @onclick="UserProfileClicked">
            <i class="bi bi-person-gear me-1"></i>
            Profile
        </a>
        
        <div class="dropdown-divider"></div>

        <a class="dropdown-item text-decoration-none cursorStyle" @onclick="LogoutAsync">
            <i class="bi bi-box-arrow-left  me-1"></i>
            Logout
        </a>
    </div>
</div>


<style>

    a {
        color: #1861ac;
        font-family: 'Poppins', sans-serif;
        line-height: 1.5;
        text-decoration: none;
    }

    a.cursorStyle{
        box-shadow: inset 0 0 0 0 #1861ac;
        color: #1861ac;
        padding: 0 .25rem;
        margin: 0 -.25rem;
        border-radius:10px;
        transition: color .3s ease-in-out, box-shadow .3s ease-in-out;
        -webkit-transition: color .3s ease-in-out, box-shadow .3s ease-in-out;
        -moz-transition: color .3s ease-in-out, box-shadow .3s ease-in-out;
        cursor: pointer;
        width: 100px; 
        text-align: center;
    }

    a.cursorStyle:hover {
        color: #fff;
        box-shadow: inset 200px 0 0 0 #1861ac;
           
    }

</style>

<ProfilePage @ref="profileDialog"/>

@code{

    public string ProfileImage { get; set; } = "";
    private ProfilePage? profileDialog;


    protected override async Task OnInitializedAsync()
    {
        await loadImage();
        userState.Action += StateHasChanged;
    }



    private async Task loadImage()
    {
        try
        {
            var state = await authState.GetAuthenticationStateAsync();
            userState.userProfile.Id = state.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value;
            var client = await getHttpClient.GetPrivateHttpClient();
            var response = await client.GetAsync($"api/authentication/user-image/{userState.userProfile.Id}");
            if (!response.IsSuccessStatusCode) return;

            var result = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(result))
                return;

            else
                userState.userProfile.ProfilePicture = result!;
        }
        catch 
        {
        }

    }

    private async Task LogoutAsync()
    {
        var logoutModel = new UserSession();
        var customAuth = (CustomAuthenticationState)authState;
        await customAuth.UpdateAuthenticationState(logoutModel);
        _Navi.NavigateTo("/identity/account/login",replace:true,forceLoad:true);

    }



    void UserProfileClicked()
    {
        profileDialog?.OpenDialog();
        sectionState.ProfileClicked();
    }

    public void Dispose()
    {
        userState.Action -= StateHasChanged;
    }
}