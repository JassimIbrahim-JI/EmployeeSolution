
@if(sectionState.ShowSanction)
{
    <MudPaper Class="mt-5" Elevation="1">
        <MudTable Items="@Sanctions.Take(6)" @bind-SelectedItem="sanction"
                  Bordered="true" Dense="@dense" Hover="@hover" Filter="new Func<Sanction, bool>(FilterAsync)" SortLabel="Sort By">

            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="float-start me-4">
                    Sanctions
                </MudText>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="AddClicked" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary">Add Sanction</MudButton>
                <MudSpacer />
                <MudTextField Placeholder="Search"
                              Adornment="Adornment.Start"
                              IconSize="Size.Small"
                              Class="mt-0"
                              FullWidth="false"
                              Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              @bind-Value="searchString">

                </MudTextField>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Sanction, object>(x=>x.EmployeeId)">#</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Sanction, object>(x=>x.EmployeeId)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Sanction, object>(x=>x.EmployeeId)">Punishment</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Sanction, object>(x=>x.EmployeeId)">PunishmentDate</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Sanction, object>(x=>x.EmployeeId)">Date</MudTableSortLabel>
                </MudTh>
                <MudTh>
                   Actions
                </MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd DataLabel="#">@((Sanctions.IndexOf(context) + 1))</MudTd>
                <MudTd DataLabel="Id">@context.EmployeeId</MudTd>
                <MudTd DataLabel="Punishment">@context.Punishment</MudTd>
                <MudTd DataLabel="PunishmentDate">@context.PunishmentDate</MudTd>
                <MudTd DataLabel="Date">@context.Date</MudTd>

                <MudTd DataLabel="Actions">
                    <MudItem>
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" id="cursorStyle" @onclick="()=>EditClicked(context)"></MudIcon>
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" id="cursorStyle" @onclick="()=>DeleteClicked(context)"></MudIcon>
                    </MudItem>
                </MudTd>



            </RowTemplate>

        </MudTable>
    </MudPaper>
}

<style>
    #cursorStyle {
        cursor:pointer;
    }
</style>

<SanctionDialog @ref="sanctionDialog" itemModel="sanction" HandleSaveOperationEvent="HandleSaveOperationEvent" SanctionTypes="SanctionTypes" />

@code {
    SanctionDialog? sanctionDialog;
  

    Sanction sanction = new();
    public List<Sanction> Sanctions { get; set; } = new();
    public List<SanctionType> SanctionTypes { get; set; } = new();


    private bool hover = true;
    private bool dense = true;
    private string searchString = "";

    private bool FilterAsync(Sanction sanction)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if ($"{sanction.Punishment}".Contains(searchString)) return true;
        if ($"{sanction.SanctionTypeId}".Contains(searchString)) return true;
        if ($"{sanction.EmployeeId}".Contains(searchString)) return true;
        if ($"{sanction.PunishmentDate}".Contains(searchString)) return true;

        return false;
    }


    protected override async Task OnInitializedAsync()
    {
        await GetSnactions();
        await GetTypes();
        sectionState.Action += StateHasChanged;
    }

    private void OpenDialog()
    {
        sanctionDialog?.OpenDialog();
    }

    void AddClicked()
    {
        sanction = new();
        OpenDialog();
    }
    private void EditClicked(Sanction doc)
    {
        sanction = doc;
        OpenDialog();
    }

    private async Task DeleteClicked(Sanction doc)
    {
        SweetAlertResult confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are You sure?",
                Text = "You will not be able to recover this!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Delete",
                CancelButtonText = "Cancel"
            });
        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await swal.FireAsync(
              "Deleted",
              "this item has been deleted.",
              SweetAlertIcon.Success
              );
            var response = await _sanctionService.Delete(doc.Id, Constants.SanctionBaseUrl);
            var result = await DisplayMessage(response.Successd, response.Message);
            if (result)
                await GetSnactions();
        }
        else if (confirm.Dismiss == DismissReason.Cancel)
        {
            await swal.FireAsync(
              "Cancelled",
              "item is safe :)",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task HandleSaveOperationEvent(Sanction item)
    {
        var result = await _sanctionService.Update(item, Constants.SanctionBaseUrl);
        bool SuccessCheck = await DisplayMessage(result.Successd, result.Message);
        if (SuccessCheck)
        {
            sanction = new();
            await GetSnactions();
            sanctionDialog!.CloseDialog();
        }
    }

    private async Task<bool> DisplayMessage(bool success, string message)
    {
        if (success)
        {
            await dialogService.ShowMessageBox("Success Operation", message);
            return true;
        }
        else
        {
            await dialogService.ShowMessageBox("Alert!",message);
            return false;
        }
    }


    private async Task GetSnactions() => Sanctions = await _sanctionService.GetAll(Constants.SanctionBaseUrl);
    private async Task GetTypes() => SanctionTypes = await _sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

    public void Dispose()
    {
        sectionState.Action -= StateHasChanged;
    }


}
