@implements IDisposable

@if(sectionState.ShowOvertimeType)
{

    <MudPaper Elevation="1" Class="mt-5">
        <MudTable Items="@overTimeTypes.Take(8)" @bind-SelectedItem="itemModel"
                  Bordered="true" Dense="@dense" Hover="@hover" Filter="new Func<OverTimeType, bool>(FilterAsync)" SortLabel="Sort By">

            <ToolBarContent>
                <MudItem Class="card-header">
                    <MudText Class="float-start me-4" Typo="Typo.h6">
                        Overtime Types
                    </MudText>
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="AddButtonClicked" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary">Add Type</MudButton>
                </MudItem>
               
                <MudSpacer />
                <MudTextField Placeholder="Search"
                              Adornment="Adornment.Start"
                              IconSize="Size.Medium"
                              Class="mt-0"
                              Immediate="true"
                              FullWidth="false"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              @bind-Value="searchString">

                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                 <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTimeType, object>(x=>x.Name)">#</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTimeType, object>(x=>x.Name)">Id</MudTableSortLabel>
                </MudTh>
                   <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTimeType, object>(x=>x.Name)">Type</MudTableSortLabel>
                   </MudTh>
                  <MudTh>
                   Actions
                  </MudTh>
                   
                
            </HeaderContent>

            <RowTemplate>
                
                    <MudTd DataLabel="#">@((overTimeTypes.IndexOf(context)+1))</MudTd>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Type">@context.Name</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudItem>
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" id="cursorStyle" @onclick="()=>EditClicked(context)"></MudIcon>
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" id="cursorStyle" @onclick="()=>DeleteClicked(context)"></MudIcon>
                        </MudItem>
                    </MudTd>
                   
                
               
                  
            </RowTemplate>
        </MudTable>
    </MudPaper>

}

<style>
    #cursorStyle{
        cursor:pointer;
    }
</style>

<OvertimeTypeDialog @ref="overtimeDialog" itemModel="itemModel" HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    OvertimeTypeDialog? overtimeDialog;
    private OverTimeType itemModel = new();
    public List<OverTimeType> overTimeTypes { get; set; } = new();


    private bool hover = true;
    private bool dense = true;
    private string searchString = "";

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        sectionState.Action += StateHasChanged;
    }

    private bool FilterAsync(OverTimeType overTime)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if ($"{overTime.Name}".Contains(searchString)) return true;

        return false;
    }

    private async Task GetTypes() => overTimeTypes = await _overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);


    private async Task HandleSaveOperationEvent(OverTimeType timeType)
    {
        bool SuccessCheck = false;
        if(timeType.Id > 0)
        {
            var result = await _overtimeTypeService.Update(timeType, Constants.OvertimeTypeBaseUrl);
            SuccessCheck = await DisplayMessage(result.Successd,result.Message);
        }
        else
        {
            var response = await _overtimeTypeService.Insert(timeType, Constants.OvertimeTypeBaseUrl);
            SuccessCheck = await DisplayMessage(response.Successd, response.Message);
        }
        if(SuccessCheck)
        {
            itemModel = new();
            await GetTypes();
            overtimeDialog!.CloseDialog();
        }

    }

    public async Task<bool>DisplayMessage(bool Success, String Message)
    {
        if(Success)
        {
            await dialogService.ShowMessageBox("Success Operation", Message);   
            return true;
        }
        else
        {
            await dialogService.ShowMessageBox("Alert!", Message);
            return false;
        }
    }


    public void OpenDialog()
    {
        overtimeDialog?.OpenDialog();
    }

    public void EditClicked(OverTimeType type)
    {
        overtimeDialog?.ChangeTitle("Update");
        itemModel = type;
        OpenDialog();
    }

    public void AddButtonClicked()
    {
        overtimeDialog?.ChangeTitle("Add");
        itemModel = new();
        OpenDialog();
    }


    public async Task DeleteClicked(OverTimeType type)
    {
        SweetAlertResult confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are You sure?",
                Text = $"You will not be able to recover {type.Name}!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Delete",
                CancelButtonText = "Cancel"
            });
        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await swal.FireAsync(
              "Deleted",
              $"{type.Name} has been deleted.",
              SweetAlertIcon.Success
              );
            var response = await _overtimeTypeService.Delete(type.Id, Constants.OvertimeTypeBaseUrl);
            var result = await DisplayMessage(response.Successd, response.Message);
            if (result)
                await GetTypes();
        }
        else if (confirm.Dismiss == DismissReason.Cancel)
        {
            await swal.FireAsync(
              "Cancelled",
              $"{type.Name} is safe :)",
              SweetAlertIcon.Error
              );
        }


    }

    public void Dispose()
    {
        sectionState.Action -= StateHasChanged;    
    }
}
