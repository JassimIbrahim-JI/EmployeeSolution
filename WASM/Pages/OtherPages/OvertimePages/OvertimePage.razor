

@if (sectionState.ShowOvertime)
{

    <MudPaper Elevation="1" Class="mt-5">
        <MudTable Items="@OverTimes.Take(6)" @bind-SelectedItem="itemModel"
                  Bordered="true" Dense="@dense" Hover="@hover" Filter="new Func<OverTime, bool>(FilterAsync)" SortLabel="Sort By">

            <ToolBarContent>
                <MudItem Class="card-header">
                    <MudText Class="float-start me-4" Typo="Typo.h6">
                        Overtimes
                    </MudText>
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="AddClicked" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary">Add Type</MudButton>
                </MudItem>

                <MudSpacer />
                <MudTextField Placeholder="Search"
                              Adornment="Adornment.Start"
                              IconSize="Size.Medium"
                              Class="mt-0"
                              Immediate="true"
                              FullWidth="false"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              @bind-Value="searchString">

                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTime, object>(x=>x.OverTimeType!.Name!)">#</MudTableSortLabel>
                </MudTh>

                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTime, object>(x=>x.OverTimeType!.Id!)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTime, object>(x=>x.OverTimeType!.Name!)">Start Date</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTime, object>(x=>x.OverTimeType!.Name!)">End Date</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTime, object>(x=>x.OverTimeType!.Name!)">Number of Days</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OverTime, object>(x=>x.OverTimeType!.Name!)">Type</MudTableSortLabel>
                </MudTh>
                <MudTh>
                   Actions
                </MudTh>

            </HeaderContent>

            <RowTemplate>
               
                <MudTd DataLabel="#">@((OverTimes.IndexOf(context)+1))</MudTd>
                <MudTd DataLabel="Id">@context.EmployeeId</MudTd>
                <MudTd DataLabel="Start Date">@context.StartDate</MudTd>
                <MudTd DataLabel="End Date">@context.EndDate</MudTd>
                <MudTd DataLabel="Number of Days">@context.numOfDays</MudTd>
                <MudTd DataLabel="Type">@context.OverTimeType!.Name</MudTd>
                <MudTd DataLabel="Actions">
                    <MudItem>
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" id="cursorStyle" @onclick="()=>EditClicked(context)"></MudIcon>
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" id="cursorStyle" @onclick="()=>DeleteClicked(context)"></MudIcon>
                    </MudItem>
                </MudTd>
              
            </RowTemplate>
        </MudTable>
    </MudPaper>

}

<OvertimeDialog @ref="overtimeDialog" itemModel="itemModel" overTimes="OverTimeTypes" HandleSaveOperationEvent="HandleSaveOperationEvent"/>

@code {

    OvertimeDialog? overtimeDialog;
    private OverTime itemModel = new();

    public List<OverTime> OverTimes { get; set; } = new();
    public List<OverTimeType> OverTimeTypes { get; set; } = new();

    private bool hover = true;
    private bool dense = true;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await GetOvertime();
        await GetTypes();
        sectionState.Action += StateHasChanged;
    }

    private bool FilterAsync(OverTime overTime)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if ($"{overTime.EmployeeId}".Contains(searchString)) return true;
        if ($"{overTime.OverTimeType?.Name}".Contains(searchString)) return true;

        return false;
    }

    private void OpenDialog()
    {
        overtimeDialog?.OpenDialog();
    }

    void AddClicked()
    {
        overtimeDialog?.ChangeTitle("Add");
        itemModel = new();
        OpenDialog();
    }
    private void EditClicked(OverTime doc)
    {
        overtimeDialog?.ChangeTitle("Update");
        itemModel = doc;
        OpenDialog();
    }

    private async Task DeleteClicked(OverTime doc)
    {
        SweetAlertResult confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are You sure?",
                Text = $"You will not be able to recover this!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Delete",
                CancelButtonText = "Cancel"
            });
        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await swal.FireAsync(
              "Deleted",
              "this item has been deleted.",
              SweetAlertIcon.Success
              );
            var response = await _overtimeService.Delete(doc.Id, Constants.OvertimeBaseUrl);
            var result = await DisplayMessage(response.Successd, response.Message);
            if (result)
                await GetOvertime();
        }
        else if (confirm.Dismiss == DismissReason.Cancel)
        {
            await swal.FireAsync(
              "Cancelled",
              "this item is safe now :)",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task HandleSaveOperationEvent(OverTime overtime)
    {
        var result = await _overtimeService.Update(overtime, Constants.OvertimeBaseUrl);
        bool SuccessCheck = await DisplayMessage(result.Successd, result.Message);
        if (SuccessCheck)
        {
            itemModel = new();
            await GetOvertime();
        }
    }

    private async Task<bool> DisplayMessage(bool success, string message)
    {
        if (success)
        {
            await swal.FireAsync("Success Operation",message);
            return true;
        }
        else
        {
            await swal.FireAsync("Alert!", message);
            return false;
        }
    }


    private async Task GetOvertime() => OverTimes = await _overtimeService.GetAll(Constants.OvertimeBaseUrl);
    private async Task GetTypes() => OverTimeTypes = await _overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

    public void Dispose()
    {
        sectionState.Action -= StateHasChanged;
    }
}
