@page "/identity/account/login"
@using WASM.Pages.OtherPages

@layout AuthenticationLayout

<section class="vh-100" style="background-color: #eee;">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-12 col-xl-11">
                <div class="card text-black" style="border-radius: 25px;">
                    <div class="card-body p-md-5">
                        <div class="row justify-content-center">
                            <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Sign In</p>

                                <EditForm Model="User" Enhance OnValidSubmit="HandleLoginAsync" class="mx-1 mx-md-4">
                                    <DataAnnotationsValidator/>
                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <label class="form-label" for="form3Example1c">Your Email</label>
                                            <InputText @bind-Value="User.Email" type="email" id="form3Example1c" class="form-control" />
 
                                            <ValidationMessage For="@(()=>User.Email)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <label class="form-label" for="form3Example4c">Password</label>
                                            <input @bind="User.Password" type="password" id="form3Example4c" class="form-control" />
                                            <ValidationMessage For="@(()=>User.Password)" class="text-danger"/>
                                        </div>
                                    </div>

                                      
                                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                                        @if(ShowLoadingSpinner)
                                        {
                                         <ButtonLoadingSpinner/>   
                                        }
                                        else
                                        {
                                            <button type="submit" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg">Login</button>
                                        }
                                    
                                    </div>

                                    <div class="d-flex align-items-center justify-content-center mb-5">

                                        <p class="small fw-bold mt-2 pt-1 mb-0">
                                            have account already? <a href="identity/account/register"
                                                                     class="link-danger">Sign Up</a>
                                        </p>
                                    </div>

                                </EditForm>
                            </div>
                          
                            <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp"
                                     class="img-fluid" alt="Login image">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private Login User = new();
    public bool ShowLoadingSpinner { get; set; } = false;


    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }


    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity!.IsAuthenticated)
        {
            _Navi.NavigateTo("/home/dashboard");
        }

    }


    private async Task HandleLoginAsync()
    {
        ShowLoadingSpinner = true;
        var result = await _accountService.LoginAsync(User);
        if(result.Successd)
        {
            await LoginModalAsync(result.Message,SweetAlertIcon.Success);
            var customAuthenication = (CustomAuthenticationState)authState;
            await customAuthenication.UpdateAuthenticationState(new UserSession() 
            { Token = result.Token, RefreshToken = result.RefreshToken });
            _Navi.NavigateTo("/", forceLoad: true);
        }
        else
        {
            await LoginModalAsync(result.Message,SweetAlertIcon.Warning);
        }
        ShowLoadingSpinner = false;
    }

    private async Task LoginModalAsync(string title, SweetAlertIcon sweetAlert)
    {

        await swal.FireAsync(new SweetAlertOptions
            {
                Title = title,
                Icon = sweetAlert,
            });
    }
}
