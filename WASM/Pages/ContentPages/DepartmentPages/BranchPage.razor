@implements IDisposable


@if (sectionState.ShowBranch)
{
    <MudPaper Class="mt-5" Elevation="1">
        <MudTable Items="@Branches.Take(4)" @bind-SelectedItem="branch"
                  Bordered="true" Dense="@dense" Hover="@hover" Filter="new Func<Branch, bool>(FilterAsync)" SortLabel="Sort By">

            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="float-start me-4">
                    Branches
                </MudText>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="AddButtonClicked" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary">Add Branch</MudButton>
                <MudSpacer />
                <MudTextField Placeholder="Search"
                              Adornment="Adornment.Start"
                              IconSize="Size.Small"
                              Class="mt-0"
                              FullWidth="false"
                              Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              @bind-Value="searchString">

                </MudTextField>
            </ToolBarContent>
        
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Name)">#</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Name)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Name)">Branch</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Name)">Department</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Name)">Actions</MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
            
                <MudTd DataLabel="#">@((Branches.IndexOf(context)+1))</MudTd>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Branch">@context.Name</MudTd>
                    <MudTd DataLabel="Department">@context.Department!.Name</MudTd>
     
                      <MudTd DataLabel="Actions">
                      <MudItem>
                        <MudIcon Icon="@Icons.Material.Filled.Edit" id="cursorStyle" @onclick="()=>EditClicked(context)"></MudIcon>
                            <MudIcon Icon="@Icons.Material.Filled.Delete" id="cursorStyle" @onclick="()=>DeleteClicked(context)"></MudIcon>
                       </MudItem>
                     </MudTd>
                
             
              
            </RowTemplate>
         
        </MudTable>
    </MudPaper>
}


<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<BranchDialog @ref="BranchDialog" HandleSaveOperationEvent="HandleSaveOperationEvent"
              BranchModel="branch" Departments="Departments"/>

@code {
    private Branch branch = new();

    public List<Branch> Branches { get; set; } = new();
    public List<Department> Departments { get; set; } = new();


    public string Title { get; set; } = "Add";
    BranchDialog? BranchDialog;


    private bool hover = true;
    private bool dense = true;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await GetBranches(); 
        await GetDepartments();
        sectionState.Action += StateHasChanged;
    }

    private bool FilterAsync(Branch branch)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if ($"{branch.Name}".Contains(searchString)) return true;
        if ($"{branch.Id}".Contains(searchString)) return true;
        if ($"{branch.Department?.Name}".Contains(searchString)) return true;

        return false;
    }

    private async Task GetDepartments()
    {
        Departments = await _departmentService.GetAll(Constants.DepartmentBaseUrl);
    }
    private async Task GetBranches()
    {
        Branches = await _branchService.GetAll(Constants.BranchBaseUrl);
    }

    private void AddButtonClicked()
    {
        BranchDialog?.ChangeTitle("Add");
        branch = new();
        OpenDialog();
    }

    public void OpenDialog()
    {
        BranchDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(Branch branchItem)
    {
        bool successCheck = false;
        if (branchItem.Id > 0)
        {
            var result = await _branchService.Update(branchItem, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(result.Successd, result.Message);
        }
        else
        {
            var response = await _branchService.Insert(branchItem, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(response.Successd, response.Message);
        }

        if (successCheck)
        {
            branch = new();
            await GetBranches();
            BranchDialog?.ChangeTitle("Add");
            BranchDialog!.CloseDialog();
        }
    }

    private void EditClicked(Branch model)
    {
        BranchDialog?.ChangeTitle("Update");
        branch = model;
        OpenDialog();
    }
    private async Task DeleteClicked(Branch item)
    {
        SweetAlertResult confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are You sure?",
                Text = $"You will not be able to recover {item.Name}!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Delete",
                CancelButtonText = "Cancel"
            });
        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await swal.FireAsync(
              "Deleted",
              $"{item.Name} has been deleted.",
              SweetAlertIcon.Success
              );
            var response = await _branchService.Delete(item.Id,Constants.BranchBaseUrl);
            var result = await DisplayMessage(response.Successd, response.Message);
            if (result)
                await GetBranches();
        }
        else if (confirm.Dismiss == DismissReason.Cancel)
        {
            await swal.FireAsync(
              "Cancelled",
              $"{item.Name} is safe :)",
              SweetAlertIcon.Error
              );
        }
    
    }

    private async Task<bool> DisplayMessage(bool Successd, string Message)
    {
        if (Successd)
        {
            await dialogService.ShowMessageBox("Success Operation", Message);
            return true;
        }
        else
        {
            await dialogService.ShowMessageBox("Alert!", Message);
            return false;
        }
    }

    public void Dispose()
    {
        sectionState.Action -= StateHasChanged;
    }
}
