

    <MudDialog Style="width:320px;" Visible="IsVisible">
        <TitleContent>
            <MudText>
                <MudIcon Icon="@Icons.Material.Filled.AddBusiness"></MudIcon>
                @Title Department
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="Dept" Enhance OnValidSubmit="Save">
                <DataAnnotationsValidator/>
            <MudTextField @bind-Value="Dept.Id" Disabled="true" ReadOnly="true" Label="DEPT ID" />
            <MudTextField @bind-Value="Dept.Name" Label="Name" Required For="@(() => Dept.Name)"/>
            <MudSelect T="int" Class="mt-3" SearchFunc="SearchDepartments" @bind-Value="@Dept.GeneralDepartmentId" Variant="Variant.Outlined" Label="Select a Main Department" AnchorOrigin="Origin.BottomCenter">
                  @if(isLoading)
                {
                    <MudProgressCircular Indeterminate="true"/>
                }

                @foreach (var item in GeneralDepartments)
                {
                    <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                }
            </MudSelect>
            <MudItem Class="d-flex mt-3 justify-content-start align-items-center">
                @* Class="ml-auto" *@
                <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                <MudButton Class="ml-auto" OnClick="CloseDialog">Close</MudButton>

            </MudItem>
            </EditForm>

          
        </DialogContent>
       
    </MudDialog>



@code {
    [Parameter] public Department Dept { get; set; } = new();
    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public EventCallback<Department> HandleSaveOperationEvent { get; set; }
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    private bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";

    public string searchString;
    public bool isLoading;


    private async Task<bool> SearchDepartments(string searchText)
    {
        isLoading = true;
        await Task.Delay(500);
        searchString = searchText;
        GeneralDepartments = GeneralDepartments.Where(d => d.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        isLoading = false;
        return true;
    }

    private async void Save()
    {
        if(string.IsNullOrEmpty(Dept.Name) || Dept.GeneralDepartmentId <=0)
        {
            await dialogService.ShowMessageBox("Alert!", "You need to provide Department name.");
        }
        else
        {
            await HandleSaveOperationEvent.InvokeAsync(Dept);

        }
    }

    private async Task ForceLoadGeneralDepartment() =>
      GeneralDepartments = await _generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);

    public async Task OpenDialog()
    {
        IsVisible = true;
        await ForceLoadGeneralDepartment();
        StateHasChanged();
    }

    public void CloseDialog()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }
   

 

}


